#include <stdio.h>
void input(int*a,int*b)
{
     printf("enter a");
     scanf("%d",a);
     printf("enter b");
     scanf("%d",b);
}
int add(int a,int b)
{
     int c;
     c=a+b;
     return c;
}
void output(int a,int b, int c)
{
     printf("%d+%d=%d",a,b,c);
}
int main()
{
     int x,y,z;
     input(&x,&y);
     z=add(x,y);
     output(x,y,z);
}
error-1
p1.c: In function ‘input’:
p1.c:5:11: warning: missing terminating " character
     scanf("%d,a) 
" is not closed 
error-2
a1.c:6:13: warning: format ‘%d’ expects argument of type ‘int *’, but argument 2 has type ‘int’ [-Wformat=]
     scanf("%d",a);
            ~^
a1.c:7:12: error: expected expression before ‘int’
     return int a;
            ^~~
puts( "Enter seven integers: " );
scanf( "%d%i%i%i%o%u%x", &a, &b, &c, &d, &e, &f, &g );
The % in this context is treated by scanf
(and printf as we’ll see) as a special character that begins a conversion specifier. The second
argument of scanf begins with an ampersand ( & )—called the address operator
& is address operator which is used for special characters such as %
